{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Get Started Welcome to the documentation of the data type registry developed in the scope of the FAIRCORE4EOSC project. The Typeregistry is based on the Cordra software developed by CNRI. Cordra is a software to manage digital objects and equip them with a persistent identifier. These digital objects are represented as JSON objects based on some previously defined JSON schema. In this typeregistry, some schemas are provided to cover many use cases. For more information on the provided schemas, refer to later pages in this documentation. Created types are equipped with a handle PID for unambigous identification of data types. Types can be created via the user interface or an API. For this, Cordra offers a REST API and a DOIP API for HTTP Clients. Documentation for these API's is provided by Cordra and can be found under the Documentation tab on the navigation bar. To get started creating types, an account is necessary. As for now, no login via some external AAI provider is integrated in the typeregistry. Rather, a request has to be send for the admin to create an account for you. To request an account, please send a mail to support@pidconsortium.net . Should you just want to experiment with the provided schemas, we also offer the DTR-Playground . Here, the same interface with the same schemas is provided, but no persistent identifiers are generated for the data types and a user account is not required for the type creation. TypeAPI The TypeAPI is an additional service that is provided as part of the DTR component. Here, further functionalities are supplemented to types of the provided schemas to increase their effective use. These additional functionalities include the generation of validation schemas for types that qualify, filtering of types based on the measurement unit they use or which taxonomy node they are assigned to, and a federated search over mutltiple registries. These additional regisitries currently include the DTR-Test and the DTR-PIT by the pidconsortium. An extensive documentation of all available endpoints can also be found under the Documentation tab on the navigation bar.","title":"Get Started"},{"location":"#get-started","text":"Welcome to the documentation of the data type registry developed in the scope of the FAIRCORE4EOSC project. The Typeregistry is based on the Cordra software developed by CNRI. Cordra is a software to manage digital objects and equip them with a persistent identifier. These digital objects are represented as JSON objects based on some previously defined JSON schema. In this typeregistry, some schemas are provided to cover many use cases. For more information on the provided schemas, refer to later pages in this documentation. Created types are equipped with a handle PID for unambigous identification of data types. Types can be created via the user interface or an API. For this, Cordra offers a REST API and a DOIP API for HTTP Clients. Documentation for these API's is provided by Cordra and can be found under the Documentation tab on the navigation bar. To get started creating types, an account is necessary. As for now, no login via some external AAI provider is integrated in the typeregistry. Rather, a request has to be send for the admin to create an account for you. To request an account, please send a mail to support@pidconsortium.net . Should you just want to experiment with the provided schemas, we also offer the DTR-Playground . Here, the same interface with the same schemas is provided, but no persistent identifiers are generated for the data types and a user account is not required for the type creation.","title":"Get Started"},{"location":"#typeapi","text":"The TypeAPI is an additional service that is provided as part of the DTR component. Here, further functionalities are supplemented to types of the provided schemas to increase their effective use. These additional functionalities include the generation of validation schemas for types that qualify, filtering of types based on the measurement unit they use or which taxonomy node they are assigned to, and a federated search over mutltiple registries. These additional regisitries currently include the DTR-Test and the DTR-PIT by the pidconsortium. An extensive documentation of all available endpoints can also be found under the Documentation tab on the navigation bar.","title":"TypeAPI"},{"location":"schemas/Overview/","text":"Schemas Overview General Schema name please use printable ascii characters without blank Type: string path: #/properties/name The value must match this pattern: ^([!-~])+$ Length: \u2264 256 description Type: string path: #/properties/description The value must match this pattern: (.| )* Length: \u2264 8192 versioning Type: object path: #/properties/versioning Properties version Type: string path: #/properties/versioning/properties/version previousVersion path: #/properties/versioning/properties/previousVersion nextVersion path: #/properties/versioning/properties/nextVersion provenance Type: object path: #/properties/provenance Properties contributors Type: array path: #/properties/provenance/properties/contributors Items Type: object path: #/properties/provenance/properties/contributors/items Properties Name Full name of the contributor Type: string path: #/properties/provenance/properties/contributors/items/properties/Name ORCID Type: string path: #/properties/provenance/properties/contributors/items/properties/ORCID creationDate Type: string path: #/properties/provenance/properties/creationDate String format must be a \"datetime\" lastModificationDate Type: string path: #/properties/provenance/properties/lastModificationDate String format must be a \"datetime\" ExpectedUse Type: string path: #/properties/ExpectedUse String format must be a \"textarea\" Length: \u2264 1024 Aliases Provide a list of aliases as alternatives to the chosen name. Type: array path: #/properties/Aliases Items Type: string path: #/properties/Aliases/items","title":"Schemas Overview"},{"location":"schemas/Overview/#schemas-overview","text":"","title":"Schemas Overview"},{"location":"schemas/Overview/#general-schema","text":"name please use printable ascii characters without blank Type: string path: #/properties/name The value must match this pattern: ^([!-~])+$ Length: \u2264 256 description Type: string path: #/properties/description The value must match this pattern: (.| )* Length: \u2264 8192 versioning Type: object path: #/properties/versioning Properties version Type: string path: #/properties/versioning/properties/version previousVersion path: #/properties/versioning/properties/previousVersion nextVersion path: #/properties/versioning/properties/nextVersion provenance Type: object path: #/properties/provenance Properties contributors Type: array path: #/properties/provenance/properties/contributors Items Type: object path: #/properties/provenance/properties/contributors/items Properties Name Full name of the contributor Type: string path: #/properties/provenance/properties/contributors/items/properties/Name ORCID Type: string path: #/properties/provenance/properties/contributors/items/properties/ORCID creationDate Type: string path: #/properties/provenance/properties/creationDate String format must be a \"datetime\" lastModificationDate Type: string path: #/properties/provenance/properties/lastModificationDate String format must be a \"datetime\" ExpectedUse Type: string path: #/properties/ExpectedUse String format must be a \"textarea\" Length: \u2264 1024 Aliases Provide a list of aliases as alternatives to the chosen name. Type: array path: #/properties/Aliases Items Type: string path: #/properties/Aliases/items","title":"General Schema"},{"location":"schemas/basictype/","text":"BasicInfoType mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"BasicInfoType"},{"location":"schemas/basictype/#basicinfotype","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"BasicInfoType"},{"location":"schemas/infotype/","text":"InfoType mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"InfoType"},{"location":"schemas/infotype/#infotype","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"InfoType"},{"location":"schemas/measurementunit/","text":"Measurement Unit Schema Taxonomies Taxonomy nodes that this type should be assigned to. Type: array path: #/properties/Taxonomies Items path: #/properties/Taxonomies/items unitDescription Type: object path: #/properties/unitDescription Properties Name Name of the Unit Type: string path: #/properties/unitDescription/properties/Name Symbol Symbol to describe the unit. A prefix symbol attached to a unit symbol (e.g. 'km', 'cm') constitutes a new inseparable unit symbol. Type: string path: #/properties/unitDescription/properties/Symbol Quantity The physical quanitity measured using the unit. Type: string path: #/properties/unitDescription/properties/Quantity Dimension Symbol The dimensional symbol used for the physical quantity. Type: string path: #/properties/unitDescription/properties/Dimension Symbol TypicalSymbols Other typical symbols to describe the measured quantity. Type: array path: #/properties/unitDescription/properties/TypicalSymbols Items Type: string path: #/properties/unitDescription/properties/TypicalSymbols/items Context Context where this unit is measured or used. Type: string path: #/properties/unitDescription/properties/Context Definition A short definition of the unit. Type: string path: #/properties/unitDescription/properties/Definition String format must be a \"textarea\" Usage How the unit is used in research. Type: string path: #/properties/unitDescription/properties/Usage String format must be a \"textarea\"","title":"Measurement Unit"},{"location":"schemas/measurementunit/#measurement-unit","text":"","title":"Measurement Unit"},{"location":"schemas/measurementunit/#schema","text":"Taxonomies Taxonomy nodes that this type should be assigned to. Type: array path: #/properties/Taxonomies Items path: #/properties/Taxonomies/items unitDescription Type: object path: #/properties/unitDescription Properties Name Name of the Unit Type: string path: #/properties/unitDescription/properties/Name Symbol Symbol to describe the unit. A prefix symbol attached to a unit symbol (e.g. 'km', 'cm') constitutes a new inseparable unit symbol. Type: string path: #/properties/unitDescription/properties/Symbol Quantity The physical quanitity measured using the unit. Type: string path: #/properties/unitDescription/properties/Quantity Dimension Symbol The dimensional symbol used for the physical quantity. Type: string path: #/properties/unitDescription/properties/Dimension Symbol TypicalSymbols Other typical symbols to describe the measured quantity. Type: array path: #/properties/unitDescription/properties/TypicalSymbols Items Type: string path: #/properties/unitDescription/properties/TypicalSymbols/items Context Context where this unit is measured or used. Type: string path: #/properties/unitDescription/properties/Context Definition A short definition of the unit. Type: string path: #/properties/unitDescription/properties/Definition String format must be a \"textarea\" Usage How the unit is used in research. Type: string path: #/properties/unitDescription/properties/Usage String format must be a \"textarea\"","title":"Schema"},{"location":"schemas/taxonomynode/","text":"TaxonomyNode Schema reference External reference to the taxonomy node. Type: string path: #/properties/reference parents Type: array path: #/properties/parents Items path: #/properties/parents/items","title":"TaxonomyNode"},{"location":"schemas/taxonomynode/#taxonomynode","text":"","title":"TaxonomyNode"},{"location":"schemas/taxonomynode/#schema","text":"reference External reference to the taxonomy node. Type: string path: #/properties/reference parents Type: array path: #/properties/parents Items path: #/properties/parents/items","title":"Schema"}]}